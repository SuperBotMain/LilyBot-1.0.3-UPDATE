const { SlashCommandBuilder, EmbedBuilder } = require('discord.js');
const Ad = require('../../Models/Ad');
require('dotenv').config();
const premiumemoji = process.env.premium;
const serverpremiumemoji = process.env.server_premium;

module.exports = {
    data: new SlashCommandBuilder()
        .setName('hirdetes-keszites')
        .setDescription('L√©trehoz egy hirdet√©st a LilyBot rendszerben.')
        .addStringOption(option =>
            option.setName('cim')
                .setDescription('A hirdet√©s c√≠me')
                .setRequired(true)
        )
        .addStringOption(option =>
            option.setName('leiras')
                .setDescription('A hirdet√©s le√≠r√°sa')
                .setRequired(true)
        )
        .addStringOption(option =>
            option.setName('meghivo_link')
                .setDescription('A szerver megh√≠v√≥ linkje')
                .setRequired(true)
        )
        .addStringOption(option =>
            option.setName('logo_url')
                .setDescription('A hirdet√©shez tartoz√≥ logo URL (opcion√°lis)')
                .setRequired(false)
        )
        .addStringOption(option =>
            option.setName('banner_url')
                .setDescription('A hirdet√©shez tartoz√≥ banner URL (opcion√°lis)')
                .setRequired(false)
        ),

    async execute(interaction, client) {
        const title = interaction.options.getString('cim');
        const description = interaction.options.getString('leiras');
        const inviteLink = interaction.options.getString('meghivo_link');
        const logoURL = interaction.options.getString('logo_url');
        const banner = interaction.options.getString('banner_url');
        const author = interaction.user.tag; // Felhaszn√°l√≥i n√©v √©s diszkrimin√°tor
        const hirdetesekChannel = '1189240000852799589';

        try {
            // URL ellen≈ërz√©se (opcion√°lis eset√©n)
            if ((inviteLink && !isValidUrl(inviteLink))) {
                return interaction.reply('A megadott megh√≠v√≥ link nem √©rv√©nyes.');
            }
            if ((logoURL && !isValidUrl(logoURL)) || (banner && !isValidUrl(banner))) {
                return interaction.reply('A megadott logo vagy banner link nem √©rv√©nyes.');
            }

            let id;
            let isUnique = false;

            // Egyedi azonos√≠t√≥ gener√°l√°sa
            while (!isUnique) {
                id = generateRandomId();
                isUnique = !(await Ad.exists({ id: id }));
            }

            // Hirdet√©s l√©trehoz√°sa az adatb√°zisban
            const newAd = new Ad({
                id: id,
                title: title,
                description: description,
                inviteLink: inviteLink,
                logoUrl: logoURL,
                banner: banner,
                author: author,
            });

            await newAd.save();


            // Visszajelz√©s k√ºld√©se
            const embed = new EmbedBuilder()
                .setColor(0x82272a) // Z√∂ld sz√≠n
                .setTitle('Hirdet√©s sikeresen l√©trehozva')
                .setDescription(`\`üí´\` **C√≠m:** ${title}\n\`‚úç\` **Le√≠r√°s:** ${description}\n\n\`üì©\` **Megh√≠v√≥ Link:** ${inviteLink}`)
                .setThumbnail(logoURL || client.user.displayAvatarURL()) // .setThumbnail hozz√°adva
                .setImage(banner) // .setImage hozz√°adva
                .setFooter({ text: `L√©trehozta: ${author}`, iconURL: client.user.displayAvatarURL() });

            interaction.reply({ embeds: [embed] });
        } catch (error) {
            console.error(error);
            interaction.reply('Hiba t√∂rt√©nt a hirdet√©s l√©trehoz√°sa sor√°n.');
        }

        try {
            const hirdetesekChannelSend = client.channels.cache.get(hirdetesekChannel);

            if (hirdetesekChannelSend) {
                const hirdetesEmbed = new EmbedBuilder()
                    .setColor(0x82272a) // Z√∂ld sz√≠n
                    .setTitle('√öj h√≠rdet√©s üì©')
                    .setDescription(`\`üí´\` **C√≠m:** ${title}\n\`‚úç\` **Le√≠r√°s:** ${description}\n\n\`üì©\` **Megh√≠v√≥ Link:** ${inviteLink}`)
                    .setThumbnail(logoURL || client.user.displayAvatarURL()) // .setThumbnail hozz√°adva
                    .setImage(banner) // .setImage hozz√°adva
                    .setFooter({ text: `L√©trehozta: ${author}`, iconURL: client.user.displayAvatarURL() });

                await hirdetesekChannelSend.send({ embeds: [hirdetesEmbed] });
            }
        } catch (error) {
            console.error(error);
            interaction.reply('Hiba t√∂rt√©nt a hirdet√©s elk√ºld√©se sor√°n.');
        }
    },
    category: `${premiumemoji}`,
};

// URL ellen≈ërz≈ë f√ºggv√©ny
function isValidUrl(url) {
    try {
        new URL(url);
        return true;
    } catch (error) {
        return false;
    }
    
}


// V√©letlenszer≈± 12 sz√°mjegy≈± azonos√≠t√≥ gener√°l√°sa
function generateRandomId() {
    return Math.floor(100000000000 + Math.random() * 900000000000).toString();
    
}

