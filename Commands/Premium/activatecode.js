const { SlashCommandBuilder, EmbedBuilder } = require('discord.js');
const PremiumCode = require('../../Models/PremiumCode');
const PremiumUser = require('../../Models/Premium');
require('dotenv').config();

module.exports = {
    data: new SlashCommandBuilder()
        .setName('activatecode')
        .setDescription('Aktiv√°l egy premium rendszer redeem k√≥dot')
        .addStringOption(option =>
            option.setName('activation_key')
                .setDescription('A redeem k√≥d aktiv√°l√°shoz sz√ºks√©ges')
                .setRequired(true)
        ),

    async execute(interaction) {
        const activationKey = interaction.options.getString('activation_key');
        const premiumlogo = process.env.premiumlogo;
        const premiumemoji = process.env.premium;

        try {
            // Ellen≈ërzi, hogy a k√≥d l√©tezik-e
            const code = await PremiumCode.findOne({ activationKey });
            if (!code) {
                return interaction.reply('A megadott redeem k√≥d √©rv√©nytelen.');
            }

            // Ellen≈ërzi, hogy a felhaszn√°l√≥ m√°r a premium adatb√°zisban van-e
            let user = await PremiumUser.findOne({ discordId: interaction.user.id });
            if (!user) {
                // Ha nincs, l√©trehozza a felhaszn√°l√≥t
                user = new PremiumUser({
                    discordId: interaction.user.id,
                    username: interaction.user.username,
                    premium: {
                        isEnabled: false,
                        expirationDate: new Date(),
                    },
                });
            }

            // Ellen≈ërzi, hogy a felhaszn√°l√≥nak van-e m√°r premiumja
            if (user.premium.isEnabled && user.premium.expirationDate > new Date()) {
                // Ha van, hozz√°adja az √∫j id≈ët az aktu√°lis lej√°rati d√°tumhoz
                const newExpirationDate = new Date(user.premium.expirationDate.getTime() + code.durationInDays * 24 * 60 * 60 * 1000);
                user.premium.expirationDate = newExpirationDate;
            } else {
                // Ha nincs, be√°ll√≠tja az √∫j id≈ët a jelenlegi d√°tumhoz
                user.premium.isEnabled = true;
                user.premium.expirationDate = new Date();
                user.premium.expirationDate.setDate(user.premium.expirationDate.getDate() + code.durationInDays);
            }

            // T√∂rli a felhaszn√°lt k√≥dot az adatb√°zisb√≥l
            await PremiumCode.findOneAndDelete({ activationKey });

            // Ment√©s az adatb√°zisba
            await user.save();

            // Visszajelz√©s k√ºld√©se
            const embed = new EmbedBuilder()
                .setColor(0x82272a) // Z√∂ld sz√≠n
                .setTitle(`${premiumemoji} Premium rendszer sikeresen aktiv√°lva.`)
                .addFields([
                    { name: '\`üë§\`' + ' Felhaszn√°l√≥', value: "`" + `${interaction.user.username}` + "`", inline: true },
                    { name: '\`‚è∞\`' + ' Id≈ë', value: "`" + `${code.durationInDays} nap` + "`", inline: true },
                    { name: '\`üìÖ\`' + ' lej√°rati d√°tum', value: "`" + `${user.premium.expirationDate.toISOString().split('T')[0]}` + "`", inline: true },
                    { name: '\`üí´\`' + ' Kateg√≥ria', value: "`" + `Felhaszn√°l√≥k sz√°m√°ra` + "`", inline: true },
                ])
                .setThumbnail(`${premiumlogo}`);

            interaction.reply({ embeds: [embed] });

        } catch (error) {
            console.error(error);
            interaction.reply('Hiba t√∂rt√©nt a k√≥d aktiv√°l√°sa sor√°n.');
        }
    },
};
